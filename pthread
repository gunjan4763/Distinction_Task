#include <iostream>
#include "def.h"
#include <pthread.h>

using namespace std;

//globally defined
string board[9] = {" ", " ", " ", " ", " ", " ", " ", " ", " "};
int player = 1;
int position = 0;
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

void introduction()
{
    cout<<"Press [Enter] to begin: ";
    getchar(); //haults the screen
    cout<<"\n";

    cout<<"\n";
    cout<<"***********\n";
    cout<<"Tic-Tac-Toe\n";
    cout<<"***********\n";

    cout<<"Player 1) X\n";
    cout<<"Player 2) O\n";

    cout<<"The 3x3 grid is shown below:\n\n";

    cout << "     |     |      \n";
    cout << "  1  |  2  |  3   \n";
    cout << "____|_____|____ \n";
    cout << "     |     |      \n";
    cout << "  4  |  5  |  6   \n";
    cout << "____|_____|____ \n";
    cout << "     |     |      \n";
    cout << "  7  |  8  |  9   \n";
    cout << "     |     |      \n\n";
}

bool is_winner()
{
    bool winner = false;
    //checking the rows
    if((board[0]==board[1]) && (board[1]==board[2]) && board[0] != " ")
    {
        winner = true;
    }
    else if ((board[3] == board[4]) && (board[4] == board[5]) && board[3] != " ")
    {
        winner = true;
    }

    else if ((board[6] == board[7]) && (board[7] == board[8]) && board[6] != " ")
    {
        winner = true;
    }

    //checking the columns

    else if((board[0]==board[3]) && (board[3]==board[6]) && board[0] != " ")
    {
        winner = true;
    }

    else if ((board[1] == board[4]) && (board[4] == board[7]) && board[1] != " ")
    {
        winner = true;
    }

    else if ((board[2] == board[5]) && (board[5] == board[8]) && board[2] != " ")
    {
        winner = true;
    }

    //checking the diagonals

    else if ((board[0]==board[4]) && (board[4]==board[8]) && board[0] != " ")
    {
        winner = true;
    }

    else if ((board[2]==board[4]) && (board[4]==board[6]) && board[2] != " ")
{
winner = true;
}

return winner;
}

bool is_board_full()
{
bool full = true;
for(int i=0; i<9; i++)
{
if(board[i] == " ")
{
full = false;
break;
}
}
return full;
}

void* play_game(void* arg)
{
while(!is_winner() && !is_board_full())
{
pthread_mutex_lock(&mutex);
cout<<"Player "<<player<<", enter a position (1-9): ";
cin>>position;
cout<<"\n";
position--;
if(board[position] != " ")
{
cout<<"Invalid move, try again\n";
pthread_mutex_unlock(&mutex);
continue;
}
if(player == 1)
{
board[position] = "X";
player = 2;
}
else if(player == 2)
{
board[position] = "O";
player = 1;
}
cout << "     |     |      \n";
cout << " " << board[0] << "   |  " << board[1] << "  |  " << board[2] << " \n";
cout << "____|_____|____ \n";
cout << "     |     |      \n";
cout << " " << board[3] << "   |  " << board[4] << "  |  " << board[5] << " \n";
cout << "____|_____|____ \n";
cout << "     |     |      \n";
cout << " " << board[6] << "   |  " << board[7] << "  |  " << board[8] << " \n";
cout << "     |     |      \n\n";
pthread_mutex_unlock(&mutex);
}

if(is_winner())
{
    pthread_mutex_lock(&mutex);
    cout<<"Player "<<player<<" wins!\n";
    pthread_mutex_unlock(&mutex);
}
else if(is_board_full())
{
    pthread_mutex_lock(&mutex);
    cout<<"It's a tie!\n";
    pthread_mutex_unlock(&mutex);
}

pthread_exit(NULL);
}

int main()
{
introduction();

pthread_t threads[2];

pthread_create(&threads[0], NULL, &play_game, NULL);
pthread_create(&threads[1], NULL, &play_game, NULL);

pthread_join(threads[0], NULL);
pthread_join(threads[1], NULL);

pthread_mutex_destroy(&mutex);

return 0;
}
